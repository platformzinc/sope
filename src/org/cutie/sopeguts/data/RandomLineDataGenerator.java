package org.cutie.sopeguts.data;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import org.cutie.sopeguts.model.MathTools;
import org.cutie.sopeguts.model.Polar;
import org.cutie.sopeguts.model.Rectangular;
import org.cutie.sopeguts.model.TestDataSuperClass;

/**
 * This software is protected by an end user licence agreement.
 *
 */

public class RandomLineDataGenerator extends TestDataSuperClass {

	private int i;
	private int u = 0;
	private boolean writeToFile = true;
	private boolean writeToFile2 = true;
	private int shots = 4;
	private int counter = 40;
	File file;
	FileWriter writer;
	BufferedWriter bufferedWriter;
	PrintWriter printWriter;

	public RandomLineDataGenerator() {

	}

	public void gen() {

		System.out.println("generating random line data..");

		file = new File(this.randomLineDataFile);

		//// //////////DEBUG.LOG(6, "generating data...");
		//// //////////DEBUG.LOG(6, "this.randomLineDataFile=" +
		//// this.randomLineDataFile);

		try {

			if (file.exists()) {
				 file.delete();
			}

			file.createNewFile();

			writer = new FileWriter(this.randomLineDataFile, true);
			bufferedWriter = new BufferedWriter(writer, 1024 * 8);
			printWriter = new PrintWriter(bufferedWriter);

		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		if (super.includeAutoBoundaryTestData) {
			// bufferedWriter.write(this.boundaryTests);
			printWriter.println(this.getBoundaryData());
			printWriter.flush();
		}

		if (TestDataSuperClass.includeAutoGeneratedTestCases) {

			for (i = 0; i < noTestCases; i++) {
				makeData(coordLimits, coordLimits);
			}
/*			for (i = 0; i < noTestCases; i++) {
				makeData(500, 500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0.00001, 0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0.00001, 99.9999);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(99.9999, 0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0.000001, 500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(500, 0.000001);
			}

			for (i = 0; i < noTestCases; i++) {
				makeData(-coordLimits, coordLimits);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(coordLimits, -coordLimits);
			}

			for (i = 0; i < noTestCases; i++) {
				makeData(-500, -500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-0.00001, -0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-0.00001, -99.9999);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-99.9999, -0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0.000001, -500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-500, 0.000001);
			}

			for (i = 0; i < noTestCases; i++) {
				makeData(-500.115648, 500.2233555);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(500.115648, -500.2233555);
			}
*/
			
			
		}
		
//		makeData(2,2);
		
		try {
			printWriter.flush();
			printWriter.close();
			System.gc();
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println(counter);
		
	}

	public void makeData(double maxe, double maxn) {
		// TODO:include boundary conditions
		u++;
		//int sign = 1;
		//double a;

/*		a = Math.random() * 10;
		if (a > 5) {
			sign = -1;
		}
*/		double oe1 = Math.random() * maxe ;//* sign;
/*		a = Math.random() * 10;
		if (a > 5) {
			sign = -1;
		}
*/		double on1 = Math.random() * maxn ;//* sign;
/*		a = Math.random() * 10;
		if (a > 5) {
			sign = -1;
		}
*/		double te1 = Math.random() * maxe ;//* sign;
/*		a = Math.random() * 10;
		if (a > 5) {
			sign = -1;
		}
*/		double tn1 = Math.random() * maxn ;//* sign;

//		oe1 = 2;
//		on1 = 3;
//		te1 = 5;
//		tn1 = 6;

		Rectangular rec = new Rectangular(oe1, on1, te1, tn1);
		double te1Wcb = rec.getTargetWcb();

/*		a = Math.random() * 10;
		if (a > 5) {
			sign = -1;
		}
*/		double shote = Math.random() * maxe ;//* sign;
/*		a = Math.random() * 10;
		if (a > 5) {
			sign = -1;
		}
*/		double shotn = Math.random() * maxn ;//* sign;

//		shote = 8;
//		shotn = 9;

		Rectangular lineShot = new Rectangular(oe1, on1, shote, shotn);
		double lineShotWcb = lineShot.getTargetWcb();
		double lineShotDist = lineShot.getTargetDistance();

		Polar fakeOrigin = new Polar(oe1, on1, (te1Wcb + 180) % 360, lineShotDist + super.randomLineConstant);

		double fakeOe1 = fakeOrigin.getTargetEastingAsDouble();
		double fakeOn1 = fakeOrigin.getTargetNorthingAsDouble();

		Rectangular extendedOrigin = new Rectangular(fakeOe1, fakeOn1, shote, shotn);
		double fakeLineShotWcb = extendedOrigin.getTargetWcb();
		double fakeLineShotDist = extendedOrigin.getTargetDistance();

		////////DEBUG.LOG(22, "fakeLineShotWcb=" + fakeLineShotWcb);
		////////DEBUG.LOG(22, "te1Wcb=" + te1Wcb);
		// sine
		double acuteAngleOrigin = MathTools.getAcuteAngle(fakeLineShotWcb, te1Wcb);
		double distance90ToShot = fakeLineShotDist * (Math.sin(Math.PI / 180 * acuteAngleOrigin));
		double distToPerpFromOrigin = fakeLineShotDist * (Math.cos(Math.PI / 180 * acuteAngleOrigin));

		Polar perpCornerCoords = new Polar(fakeOe1, fakeOn1, te1Wcb, distToPerpFromOrigin);
		double perpE = perpCornerCoords.getTargetEasting();
		double perpN = perpCornerCoords.getTargetNorthing();

//		shote = Double.valueOf(MathTools.roundToPod3(shote, 12));
//		shotn = Double.valueOf(MathTools.roundToPod3(shotn, 12));
//		perpE = Double.valueOf(MathTools.roundToPod3(perpE, 12));
//		perpN = Double.valueOf(MathTools.roundToPod3(perpN, 12));


		Rectangular whichWayToMove = new Rectangular(shote, shotn, perpE, perpN);
		double chainMansWcb = whichWayToMove.getTargetWcb();
		double testingDist = whichWayToMove.getTargetDistance();
		
		////////DEBUG.LOG(22, "chainMansWcb=" + chainMansWcb);
		
		
		if(distance90ToShot < TestDataSuperClass.distPrecision){
			chainMansWcb = Double.NaN;
		}

		////////DEBUG.LOG(22, "shote=" + shote);
		////////DEBUG.LOG(22, "shotn=" + shotn);
		////////DEBUG.LOG(22, "perpE=" + perpE);
		////////DEBUG.LOG(22, "perpN=" + perpN);
		////////DEBUG.LOG(22, "testingDist=" + testingDist);

		String out = (counter) + "=";
		out += oe1 + "," + on1 + "," + te1 + "," + tn1 + "," + shote + "," + shotn + "," + acuteAngleOrigin + ","
				+ distToPerpFromOrigin + "," + perpE + "," + perpN + "," + chainMansWcb + "," + distance90ToShot;

		if (super.includeAutoGeneratedTestCases && oe1 > -1 * TestDataSuperClass.coordLimits
				&& on1 > -1 * TestDataSuperClass.coordLimits && te1 > -1 * TestDataSuperClass.coordLimits
				&& tn1 > -1 * TestDataSuperClass.coordLimits && shote > -1 * TestDataSuperClass.coordLimits
				&& shotn > -1 * TestDataSuperClass.coordLimits

		&& oe1 < TestDataSuperClass.coordLimits && on1 < TestDataSuperClass.coordLimits
				&& te1 < TestDataSuperClass.coordLimits && shote < TestDataSuperClass.coordLimits
				&& shotn < TestDataSuperClass.coordLimits && tn1 < TestDataSuperClass.coordLimits) {

			// append to file
			try {
				counter++;
				////////DEBUG.LOG(22, "appending.." + out);
				printWriter.println(out);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
	}

	private String getBoundaryData() {

		String boundaryTests = "";
		boundaryTests += "0=1.0,2.0,55.0,56.0,8.0,9.0,0.0,19.79898987322333,8.0,9.0,NaN,0.0\n";
		boundaryTests += "1=1.0,2.0,55.0,56.0,99.0,100.0,0.0,277.18585822512665,99.0,100.0,NaN,0.0\n";
		boundaryTests += "3=66.0,65.0,-9.0,-10.0,3.0,2.0,0.0,178.19090885900997,3.0,2.0,NaN,0.0\n";
		boundaryTests += "8=5.0,-5.0,-5.0,5.0,3.0,-3.0,0.0,5.656854249492381,3.0,-3.0,NaN,0.0\n";
		boundaryTests += "9=5.0,-5.0,-5.0,5.0,-3.0,3.0,0.0,22.627416997969522,-3.0,3.0,NaN,0.0\n";
		boundaryTests += "10=-5.0,-5.0,5.0,5.0,-3.0,-3.0,0.0,5.656854249492381,-3.0,-3.0,NaN,0.0\n";
		boundaryTests += "11=-5.0,-5.0,5.0,5.0,3.0,3.0,0.0,22.627416997969522,3.0,3.0,NaN,0.0\n";
		boundaryTests += "12=5.0,5.0,5.0,5.0,3.0,3.0,NaN,NaN,5.0,5.0,45.0,NaN\n";
		boundaryTests += "13=5.0,5.0,5.0,5.0,5.0,5.0,NaN,NaN,5.0,5.0,NaN,NaN\n";
		boundaryTests += "14=5.0,5.0,-5.0,-5.0,3.0,3.0,0.0,5.656854249492381,3.0,3.0,NaN,0.0\n";
		boundaryTests += "15=5.0,5.0,-5.0,-5.0,-3.0,-3.0,0.0,22.627416997969522,-3.0,-3.0,NaN,0.0\n";
		boundaryTests += "16=0.0,0.0,0.0,0.0,-3.0,-3.0,NaN,NaN,0.0,0.0,45.0,NaN\n";
		boundaryTests += "17=0.0,0.0,0.0,0.0,0.0,0.0,NaN,NaN,0.0,0.0,NaN,NaN\n";
		boundaryTests += "18=6.0,5.0,9.0,8.0,4.0,3.0,0.0,10.0,4.0,3.0,NaN,0.0\n";
		boundaryTests += "19=-5.0,5.0,5.0,-5.0,3.0,-3.0,0.0,32.62741699796952,3.0,-3.0,NaN,0.0\n";
		boundaryTests += "20=0.0,-5.0,0.0,-15.0,0.0,-3.0,0.0,31.245599999999996,0.0,-3.0,NaN,0.0\n";
		boundaryTests += "21=0.0,-5.0,0.0,-15.0,0.0,3.0,0.0,31.245599999999996,0.0,3.0,NaN,0.0\n";
		boundaryTests += "22=-5.0,0.0,-15.0,0.0,-5.0,0.0,0.0,31.2456,-5.0,0.0,NaN,0.0\n";
		boundaryTests += "23=-5.0,0.0,-15.0,0.0,-15.0,0.0,0.0,51.245599999999996,-15.0,0.0,NaN,0.0\n";
		boundaryTests += "24=-5.0,0.0,-15.0,0.0,-3.0,0.0,0.0,31.245599999999996,-3.0,0.0,NaN,0.0\n";
		boundaryTests += "25=-5.0,0.0,-15.0,0.0,3.0,0.0,0.0,31.245599999999996,3.0,0.0,NaN,0.0\n";
		boundaryTests += "26=0.0,5.0,0.0,0.0,3.0,0.0,4.078208724046135,42.0765518948453,0.0,0.0,270.0,2.9999999999999742\n";
		boundaryTests += "27=0.0,5.0,0.0,0.0,0.0,0.0,0.0,41.245599999999996,0.0,0.0,NaN,0.0\n";
		boundaryTests += "28=0.0,5.0,0.0,0.0,0.0,10.0,0.0,31.245599999999996,0.0,10.0,NaN,0.0\n";
		boundaryTests += "29=0.0,5.0,0.0,0.0,0.0,0.001,0.0,41.2436,0.0,0.001,NaN,0.0\n";
		boundaryTests += "30=0.0,5.0,0.0,0.0,0.0,-6.0,0.0,53.245599999999996,0.0,-6.0,NaN,0.0\n";
		boundaryTests += "31=10.0,0.0,0.0,0.0,0.0,0.0,0.0,51.245599999999996,0.0,0.0,NaN,0.0\n";
		boundaryTests += "32=10.0,0.0,0.0,0.0,80.0,0.0,0.0,31.245599999999996,80.0,0.0,NaN,0.0\n";
		boundaryTests += "33=10.0,0.0,0.0,0.0,-80.0,0.0,0.0,211.2456,-80.0,0.0,NaN,0.0\n";
		boundaryTests += "34=2.0,3.0,5.0,6.0,8.0,9.0,0.0,48.21616274847714,8.0,8.999999999999996,NaN,0.0\n";
		boundaryTests += "35=0,0,20.0,0,0,2,3.44266976174,31.2456,0,0,180,2\n";
		boundaryTests += "35=0,0,0,20,2,0,3.44266976174,31.2456,0,0,270,2\n";
		boundaryTests += "35=0,0,-20.0,0,0,2,3.44266976174,31.2456,0,0,180,2\n";
		boundaryTests += "35=0,0,0,20,-2,0,3.44266976174,31.2456,0,0,90,2\n";
			
		return boundaryTests;
		
		
		
		/*
				pData.setOriginEasting(Double.valueOf(v[0]));
				pData.setOriginNorthing(Double.valueOf(v[1]));
				pData.setTargetEasting(Double.valueOf(v[2]));
				pData.setTargetNorthing(Double.valueOf(v[3]));
				
				pData.setPointEasting(Double.valueOf(v[4]));
				pData.setPointNorthing(Double.valueOf(v[5]));
				
				pData.setAcuteAngleOrigin(Double.valueOf(v[6]));
				pData.setDistTo90FromOrigin(Double.valueOf(v[7]));
				pData.setPerpEasting(Double.valueOf(v[8]));
				pData.setPerpNorthing(Double.valueOf(v[9]));
				
				////////////DEBUG.LOG(0, "RRL-distance90ToShot=" + v[6]);
				
				pData.setChainMansWcb(Double.valueOf(v[10]));
				////////////DEBUG.LOG(0, "RRL-setChainMansWcb=" + v[10]);
				pData.setdistance90ToShot(Double.valueOf(v[11]));
		 */
	}

	public static void main(String[] args) {
		RandomLineDataGenerator g = new RandomLineDataGenerator();
		g.gen();
	}

}