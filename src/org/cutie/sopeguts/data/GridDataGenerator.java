package org.cutie.sopeguts.data;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import org.cutie.sopeguts.model.DxDy2AngleDist;
import org.cutie.sopeguts.model.Polar;
import org.cutie.sopeguts.model.Rectangular;
import org.cutie.sopeguts.model.TestDataSuperClass;

/**
 * This software is protected by an end user licence agreement.
 *
 */

public class GridDataGenerator extends TestDataSuperClass {

	private int i, counter = 30;
	File gridDataFile;
	FileWriter writer;
	BufferedWriter bufferedWriter;
	PrintWriter printWriter;


	public GridDataGenerator() {
	}

	public void gen() {
		System.out.println("generating grid data..");

		gridDataFile = new File("c:/projects/workspace/Sope/src/org/cutie/sopeguts/data/grids.properties");

		try {
			if (gridDataFile.exists()) {
				gridDataFile.delete();
			}
			gridDataFile.createNewFile();
			writer = new FileWriter(gridDataFile, true);
			bufferedWriter = new BufferedWriter(writer, 1024 * 8);
			printWriter = new PrintWriter(bufferedWriter);

		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		if (TestDataSuperClass.includeAutoGeneratedTestCases) {

			int j = noTestCases;
			
			for (i = 0; i < j; i++) {
				makeData(coordLimits, coordLimits);
			}
/*			for (i = 0; i < noTestCases; i++) {
				makeData(-coordLimits, coordLimits);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(coordLimits, -coordLimits);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-coordLimits, -coordLimits);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(500, 500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0.00001, 99.9999);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(99.9999, 0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0, 500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(500, 0);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0.00001, 0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-500, -500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-0.00001, -0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-0.00001, -99.9999);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-99.9999, -0.00001);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(0, -500);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-500, 0);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(-500.115648, 500.2233555);
			}
			for (i = 0; i < noTestCases; i++) {
				makeData(500.115648, -500.2233555);
			}
*/
		}

//		makeData(2,2);
		
		if(super.includeAutoBoundaryTestData){
			printWriter.println(this.getBoundaryData());
		}
		
		printWriter.flush();
		printWriter.close();
		System.out.println(counter);
	}

	public void makeData(double maxe, double maxn) {
		// TODO:include boundary conditions

		int sign = 1;
		double a;
		////a = Math.random() * 10; if(a>5) {sign=-1;}
		double loe = Math.random() * maxe;// * sign;
		////a = Math.random() * 10; if(a>5) {sign=-1;}
		double lon = Math.random() * maxn;// * sign;
		////a = Math.random() * 10; if(a>5) {sign=-1;}
		double lte = Math.random() * maxe;// * sign;
		////a = Math.random() * 10; if(a>5) {sign=-1;}
		double ltn = Math.random() * maxn;// * sign;
		////a = Math.random() * 10; if(a>5) {sign=-1;}
		double soe = Math.random() * maxe;// * sign;
		////a = Math.random() * 10; if(a>5) {sign=-1;}
		double son = Math.random() * maxn;// * sign;

		
//----------------------------------------//
	
	  //checked with calculator test data is OK.
	
		/*
		loe = 500.125;//1+=
		lon = 100.223;
		lte = 500.125;
		ltn = 109.222;// wcb =0, dist =8.999 
		
		loe = 500.125;//1+
		lon = 100.223;
		lte = 509.125;
		ltn = 109.222;// wcb =45'00'11.459792545 , dist = 12.7272149742 
						// wcbd=45.003183275707
		loe = 500.125;//2
		lon = 100.223;
		lte = 509.125;
		ltn = 99.222;// wcb = 96'20'47.32882930 , dist = 9.05549562421
					//	wcb = 96.346480230361
		loe = 500.125;//3
		lon = 100.223;
		lte = 99.125;
		ltn = 99.222;// wcb = 269'51'25'.1106179 , dist =401.001249376 
					//wcb = 269.85697517163
		
		loe = 500.125;//4
		lon = 100.223;
		lte = 99.125;
		ltn = 519.222;// wcb =316'15'26'.7911036 , dist =579.966518
/*					  // wcb =316.25744197322
//-------------------------------------//
		// these have not been done. prob. not necessary
		loe = 500.125;
		lon = 100.223;
		lte = 509.125;
		ltn = 99.222;// wcb =89'29'11.90634216 , dist =1004.38731494 
		
		loe = 500.125;
		lon = 100.223;
		lte = 509.125;
		ltn = 99.222;// wcb =89'29'11.90634216 , dist =1004.38731494 
		
		loe = 500.125;
		lon = 100.223;
		lte = 509.125;
		ltn = 99.222;// wcb =89'29'11.90634216 , dist =1004.38731494 
		
		loe = 500.125;
		lon = 100.223;
		lte = 509.125;
		ltn = 99.222;// wcb =89'29'11.90634216 , dist =1004.38731494 
		
		*/
//--------------------------------------//
		
		double ldeltae = lte - loe;
		double ldeltan = ltn - lon;
		
		// grid 1------------------------------
		DxDy2AngleDist dxdy = new DxDy2AngleDist(ldeltae, ldeltan);
		double localwcb = dxdy.getTargetWcb();
		double localdist = dxdy.getTargetDistance();

		// ////////DEBUG.LOG(0,"localwcb= " + localwcb);
		// rotation
		double rotation = Math.random() * 360;
		// 100.23434797913308 - ?? error on this one for some reason
		// 100.23434797991047 - result from Grids.java
		// ////////DEBUG.LOG(0,"rotation = " + rotation);
		// grid 2

//		rotation = 240;
		
		double skewedwcb = (localwcb + rotation) % 360;
		// ////////DEBUG.LOG(0,"skewedwcb = " + skewedwcb);

	//	soe = 1000;
	//	son = 20;
		// ste = 837.63622184
		// stn = -536.775686918
		
		// new grid coords
		Polar p = new Polar(soe, son, skewedwcb, localdist);
		double ste = p.getTargetEastingAsDouble();// 2nd target new grid
		double stn = p.getTargetNorthingAsDouble();// 2nd target new grid
		// ////////DEBUG.LOG(0,"GridDataGenerator ste - " + ste);
		// ////////DEBUG.LOG(0,"GridDataGenerator stn - " + stn);

		///////////////////// SET//////////////////////////
		// shot
		// local coords
		//a = Math.random() * 10; if(a>5) {sign=-1;}
		double shotlocale = loe + Math.random() * maxe;// * sign;
		//a = Math.random() * 10; if(a>5) {sign=-1;}
		double shotlocaln = lon + Math.random() * maxe;// * sign;
		
	//	shotlocale = 12.125;
	//	shotlocaln = 23456.222;
		
		// 1st point 1st grid
		Rectangular r = new Rectangular(loe, lon, shotlocale, shotlocaln);
		double shotlocalwcb = r.getTargetWcb();
		double shotlocaldist = r.getTargetDistance();

		// 1st point new grid
		double skewedWCB2 = (shotlocalwcb + rotation) % 360;

		Polar p2 = new Polar(soe, son, skewedWCB2, shotlocaldist);
		double shotskewede = p2.getTargetEastingAsDouble();
		double shotskewedn = p2.getTargetNorthingAsDouble();

		GridData g = new GridData(super.distPod, super.wcbSecondsPod, loe, lon, lte, ltn, localwcb, localdist, soe, son, ste, stn, skewedwcb,
				localdist, rotation, shotlocale, shotlocaln, shotlocalwcb, shotlocaldist, shotskewede, shotskewedn,
				skewedWCB2);

		String out = (counter) + "=";
		out += g.getData();

		if (super.includeAutoGeneratedTestCases 
				&& loe > -1 * TestDataSuperClass.coordLimits
				&& lon > -1 * TestDataSuperClass.coordLimits
				&& lte > -1 * TestDataSuperClass.coordLimits
				&& soe > -1 * TestDataSuperClass.coordLimits
				&& son > -1 * TestDataSuperClass.coordLimits
				&& ltn > -1 * TestDataSuperClass.coordLimits

		
				&& loe < TestDataSuperClass.coordLimits 
				&& lon < TestDataSuperClass.coordLimits
				&& lte < TestDataSuperClass.coordLimits
				&& soe < TestDataSuperClass.coordLimits
				&& son < TestDataSuperClass.coordLimits
				&& ltn < TestDataSuperClass.coordLimits) {
			// append to file
			try {
				counter++;
				printWriter.println(out);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		// ////////DEBUG.LOG(0,"loe = " + loe);
		// ////////DEBUG.LOG(0,"lon = " + lon);
		// ////////DEBUG.LOG(0,"counter = " + counter);


	}
	
	private String getBoundaryData(){
		String b = "";
		
		b += "0=500.125,100.223,500.125,109.222,0.0,8.998999999999995,300.0,200.0,306.36325392389773,206.36325392389773,45.0,8.998999999999995,45.0,501.125,199.222,0.5787314109820159,99.00405042724263,370.7099710118736,269.29575744950046,45.578731410982016\n";
		b += "1=500.125,100.223,500.125,109.222,0.0,8.998999999999995,300.0,200.0,306.36325392389773,206.36325392389773,45.0,8.998999999999995,45.0,501.125,9.222,179.3704083096228,91.00649427925461,236.35968258642953,134.94546902405642,224.3704083096228\n";
		b += "2=500.125,100.223,500.125,109.222,0.0,8.998999999999995,300.0,200.0,306.36325392389773,206.36325392389773,45.0,8.998999999999995,45.0,401.125,9.222,227.41071605047,134.47000409384987,165.64900446777477,205.65614714271115,272.41071605047\n";
		b += "3=500.125,100.223,500.125,109.222,0.0,8.998999999999995,300.0,200.0,306.36325392389773,206.36325392389773,45.0,8.998999999999995,45.0,401.125,609.222,348.9934251807931,518.5373487040254,589.9130731797038,629.9202158546393,33.99342518079311\n";
		b += "4=500.125,100.223,500.125,109.222,0.0,8.998999999999995,800.0,700.0,806.3632539238978,706.3632539238978,45.0,8.998999999999995,45.0,601.125,609.222,11.223339095037886,518.9229056430252,1231.3344294170129,988.49885961733,56.223339095037886\n";
		b += "5=500.125,100.223,500.125,109.222,0.0,8.998999999999995,800.0,700.0,806.3632539238978,706.3632539238978,45.0,8.998999999999995,45.0,601.125,9.222,132.01885188710787,135.94918904134735,807.0703607050842,564.2347909054017,177.01885188710787\n";
		b += "6=500.125,100.223,500.125,109.222,0.0,8.998999999999995,800.0,700.0,806.3632539238978,706.3632539238978,45.0,8.998999999999995,45.0,201.125,9.222,253.07231155633463,312.541488447534,524.2276482304653,847.077503380021,298.0723115563346\n";
		b += "7=500.125,100.223,500.125,109.222,0.0,8.998999999999995,800.0,700.0,806.3632539238978,706.3632539238978,45.0,8.998999999999995,45.0,201.125,609.222,329.5688532627481,590.3227778097335,948.4917169423936,1271.3415720919493,14.56885326274812\n";
		b += "8=500.125,100.223,509.125,99.222,96.34648023036192,9.055495624205227,10.0,20.0,7.451373840232392,11.310552048734728,196.34648023036198,9.055495624205227,100.0,601.125,609.222,11.223339095037886,518.9229056430252,493.72769553110084,-167.85233183852316,111.22333909503789\n";
		b += "9=500.125,100.223,509.125,99.222,96.34648023036192,9.055495624205227,10.0,20.0,7.451373840232392,11.310552048734728,196.34648023036198,9.055495624205227,100.0,601.125,19.222,128.72926778649492,129.46876843856978,-87.30887874610177,-65.39990701503406,228.72926778649492\n";
		b += "10=500.125,100.223,509.125,99.222,96.34648023036192,9.055495624205227,10.0,20.0,7.451373840232392,11.310552048734728,196.34648023036198,9.055495624205227,100.0,401.125,19.222,230.71024646508238,127.91466687209876,-52.57924321271575,131.56164358740762,330.7102464650824\n";
		b += "11=500.125,100.223,509.125,99.222,96.34648023036192,9.055495624205227,10.0,20.0,7.451373840232392,11.310552048734728,196.34648023036198,9.055495624205227,100.0,401.125,609.222,348.9934251807931,518.5373487040254,528.457331064487,29.109218763918022,88.99342518079311\n";
		b += "12=500.125,100.223,99.125,99.222,269.85697517165886,401.0012493758592,10.0,2000.0,-390.9563956165566,2005.9975674384984,270.85697517165886,401.0012493758592,1.0,601.125,609.222,11.223339095037886,518.9229056430252,119.86787463496667,2507.158783936742,12.223339095037886\n";
		b += "13=500.125,100.223,99.125,99.222,269.85697517165886,401.0012493758592,10.0,2000.0,-390.9563956165566,2005.9975674384984,270.85697517165886,401.0012493758592,1.0,601.125,209.222,42.81862066067714,148.5994010788738,112.88691206005299,2107.219705874186,43.81862066067714\n";
		b += "14=500.125,100.223,99.125,99.222,269.85697517165886,401.0012493758592,10.0,2000.0,-390.9563956165566,2005.9975674384984,270.85697517165886,401.0012493758592,1.0,301.125,209.222,298.71100449672144,226.89597176018793,-187.06739648686448,2112.4554278053706,299.71100449672144\n";
		b += "15=500.125,100.223,99.125,99.222,269.85697517165886,401.0012493758592,10.0,2000.0,-390.9563956165566,2005.9975674384984,270.85697517165886,401.0012493758592,1.0,301.125,809.222,344.3217690656612,736.3970274254236,-176.595952624494,2712.364044899206,345.3217690656612\n";
		b += "16=500.125,100.223,99.125,519.222,316.25744197324263,579.9665179999618,1000.0,20.0,837.6362218397243,-536.7756869175599,196.25744197324263,579.9665179999618,240.0,12345.125,23456.222,26.891854817596652,26187.9116060827,-25149.388464763942,-1399.9285921733535,266.8918548175966\n";
		b += "17=500.125,100.223,99.125,519.222,316.25744197324263,579.9665179999618,1000.0,20.0,837.6362218397243,-536.7756869175599,196.25744197324263,579.9665179999618,240.0,12345.125,23.222,90.3724584358664,11845.25027823393,-4855.815177883195,10316.571407826676,330.3724584358664\n";
		b += "18=500.125,100.223,99.125,519.222,316.25744197324263,579.9665179999618,1000.0,20.0,837.6362218397243,-536.7756869175599,196.25744197324263,579.9665179999618,240.0,12.125,23.222,261.0332880585497,494.0376038329471,1310.6848221168057,-364.11989704680593,141.03328805854972\n";
		b += "19=500.125,100.223,99.125,519.222,316.25744197324263,579.9665179999618,1000.0,20.0,837.6362218397243,-536.7756869175599,196.25744197324263,579.9665179999618,240.0,12.125,23456.222,358.80303674057154,23361.09657717293,-18982.88846476394,-12080.61989704681,238.80303674057154\n";

		b += "20=536.124,195.444,579.666,211.111,70.2105832159,46.2748382277,500,100,508.202979999,145.541978132,10.2105832159,46.2748382277,300,622.222,201.126,86.2242651052,86.285286857,538.128243656,177.404055215,26.2242651052\n";
		b += "21=536.124,195.444,579.666,211.111,70.2105832159,46.2748382277,500,100,508.202979999,145.541978132,10.2105832159,46.2748382277,300,622.222,130.111,127.192002833,108.079907906,599.629037705,141.896555215,67.192002833\n";
		b += "22=536.124,195.444,579.666,211.111,70.2105832159,46.2748382277,500,100,508.202979999,145.541978132,10.2105832159,46.2748382277,300,488.888,201.126,276.859130708,47.5765154252,471.461243656,61.9334240268,216.859130708\n";
		b += "23=536.124,195.444,579.666,211.111,70.2105832159,46.2748382277,500,100,508.202979999,145.541978132,10.2105832159,46.2748382277,300,488.888,130.111,215.867068034,80.620348455,532.962037705,26.4259240268,155.867068034\n";
		b += "24=536.124,195.444,579.666,211.111,70.2105832159,46.2748382277,500,100,508.202979999,145.541978132,10.2105832159,46.2748382277,300,-580.888,195.444,270,1117.012,-58.5060000003,-867.360768332,210\n";
		b += "25=536.124,195.444,579.666,211.111,70.2105832159,46.2748382277,500,100,508.202979999,145.541978132,10.2105832159,46.2748382277,300,580.888,-195.444,173.467019522,393.442809364,860.900938034,-56.6772388251,113.467019522\n";
		b += "26=536.124,195.444,579.666,211.111,70.2105832159,46.2748382277,500,100,508.202979999,145.541978132,10.2105832159,46.2748382277,300,-580.888,-195.444,250.712978914,1183.43112883,280.012938034,-1062.80476833,190.712978914";
		
		return b;
	}

	public static void main(String[] args) {
		GridDataGenerator g = new GridDataGenerator();
		g.gen();
	}

}